<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>6. Query Optimization Techniques on RDS Performance Insights &amp; Query Optimization</title><link>http://localhost:1313/query-optimization/</link><description>Recent content in 6. Query Optimization Techniques on RDS Performance Insights &amp; Query Optimization</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 15 Jul 2025 11:00:00 +0700</lastBuildDate><atom:link href="http://localhost:1313/query-optimization/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>http://localhost:1313/query-optimization/overview/</link><pubDate>Fri, 11 Jul 2025 11:00:00 +0700</pubDate><guid>http://localhost:1313/query-optimization/overview/</guid><description>Query Optimization Overview ðŸŽ¯ What is Query Optimization? Query optimization is the process of improving database query performance through various techniques including index optimization, query rewriting, and execution plan analysis.
Info: Effective query optimization can improve performance by 70% or more while reducing resource consumption.
ðŸš€ Optimization Techniques 1. Index Strategies Learn advanced indexing techniques to speed up your queries:
Composite indexes and leftmost prefix optimization Covering indexes for maximum performance When to use and avoid indexes 2.</description></item><item><title>Index Strategies</title><link>http://localhost:1313/query-optimization/index-strategies/</link><pubDate>Tue, 15 Jul 2025 11:00:00 +0700</pubDate><guid>http://localhost:1313/query-optimization/index-strategies/</guid><description>Index Strategies - Advanced Indexing Techniques Effective use of indexes is the most important factor in speeding up queries. An index is like a table of contents in a book, helping the database find data faster without having to scan the entire table.
Importance of Indexes When a query is executed, if there is no suitable index, the database must perform a full table scan to search for data, which is especially expensive with large tables.</description></item><item><title>Query Rewriting</title><link>http://localhost:1313/query-optimization/query-rewriting/</link><pubDate>Tue, 15 Jul 2025 11:00:00 +0700</pubDate><guid>http://localhost:1313/query-optimization/query-rewriting/</guid><description>Query Rewriting - Master Query Optimization Patterns Rewriting or adjusting the structure of SQL queries can greatly impact how the database executes them. The goal is to help the database&amp;rsquo;s Query Optimizer choose a more efficient execution plan.
Basic Principles Avoid SELECT * Only select the columns you actually need. This reduces the amount of data read from disk and transmitted over the network.
Use JOIN instead of Subqueries (for some cases) Sometimes, subqueries can be rewritten as JOINs to improve performance, especially IN subqueries.</description></item><item><title>Execution Plans</title><link>http://localhost:1313/query-optimization/execution-plans/</link><pubDate>Tue, 15 Jul 2025 11:00:00 +0700</pubDate><guid>http://localhost:1313/query-optimization/execution-plans/</guid><description>Execution Plans - Understanding and Analyzing Query Plans An execution plan is the &amp;ldquo;roadmap&amp;rdquo; that the database will follow to execute a query. Understanding it is the key to diagnosing and fixing query performance issues.
How to Get Execution Plans Using EXPLAIN Use the EXPLAIN command before any SQL query:
EXPLAIN SELECT * FROM users WHERE id = 1; Using EXPLAIN ANALYZE Available in recent MySQL versions and PostgreSQL to actually run the query and collect real-time statistics about the execution plan, including time and actual number of rows processed:</description></item></channel></rss>